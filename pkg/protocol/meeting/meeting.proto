syntax = "proto3";
package openmeeting.meeting;

import "pbwrapper/pbwrapper.proto";

option go_package = "github.com/openimsdk/openmeeting-server/pkg/protocol/meeting";


// Defines LiveKit access information.
message LiveKit {
  string token = 1;  // Access token for authentication.
  string url = 2;  // URL to connect to LiveKit.
}

// Information about a specific meeting that cannot be changed once set.
message SystemGeneratedMeetingInfo {
  string creatorUserID = 1; // The user ID of the meeting creator.
  string creatorNickname = 2; // The user name of the meeting creator.
  string status = 3; // The current status of the meeting, e.g., scheduled, in-progress, completed.
  int64 startTime = 4; // The actual start time of the meeting (as a timestamp).
  string meetingID = 5; // Unique identifier for the meeting.
}

// Information about a specific meeting that can be modified.
message CreatorDefinedMeetingInfo {
  string title = 1; // The title of the meeting.
  int64 scheduledTime = 2; // The scheduled start time of the meeting (as a timestamp).
  int64 meetingDuration = 3; // The duration of the meeting in seconds.
  string password = 4; // Password required to join the meeting, if any.
}

// Information about a specific meeting, combining system-generated and creator-defined information.
message MeetingInfo {
  SystemGeneratedMeetingInfo systemGenerated = 1;
  CreatorDefinedMeetingInfo creatorDefinedMeeting = 2;
}

// Settings controlling meeting features such as video, audio, and screen sharing permissions.
message MeetingSetting {
  bool canParticipantsEnableCamera = 1; // Whether participants can enable their video camera.
  bool canParticipantsUnmuteMicrophone = 2; // Whether participants can unmute their microphone.
  bool canParticipantsShareScreen = 3; // Whether participants can share their screen.
  bool disableCameraOnJoin = 4; // Whether the camera is disabled by default when joining.
  bool disableMicrophoneOnJoin = 5; // Whether the microphone is disabled by default when joining.
}

// Detailed information about a meeting, combining info and settings.
message MeetingInfoSetting {
  MeetingInfo info = 1;
  MeetingSetting setting = 2;
}

message UserInfo {
  string userID = 1;
  string nickname = 2;
  string account = 3;
}

// participant meta data
message ParticipantMetaData{
  UserInfo userInfo = 1;
}


// Request to book a future meeting.
message BookMeetingReq {
  string creatorUserID = 1;
  CreatorDefinedMeetingInfo creatorDefinedMeetingInfo = 2;
  MeetingSetting setting = 3;
}

// Response after booking a meeting.
message BookMeetingResp {
  MeetingInfoSetting detail = 1;
}

// Request to create an immediate meeting.
message CreateImmediateMeetingReq {
  string creatorUserID = 1;
  CreatorDefinedMeetingInfo creatorDefinedMeetingInfo = 2;
  MeetingSetting setting = 3;
}

// Response after creating an immediate meeting.
message CreateImmediateMeetingResp {
  MeetingInfoSetting detail = 1;
  LiveKit liveKit = 2;
}

// Request to join a meeting.
message JoinMeetingReq {
  string meetingID = 1;
  string userID = 2; // User who joins the meeting.
  string password = 3;
}

// Response after joining a meeting.
message JoinMeetingResp {
  LiveKit liveKit = 1;
}

// Request to get a specific meeting token.
message GetMeetingTokenReq {
  string meetingID = 1;
  string userID = 2; // User who joins the meeting.
}

// Response after getting a specific meeting.
message GetMeetingTokenResp {
  string meetingID = 1;
  LiveKit liveKit = 2;
}

// Request to leave a meeting.
message LeaveMeetingReq {
  string meetingID = 1;
  string userID = 2; // User who leaves the room.
}

// Response after leaving a meeting.
message LeaveMeetingResp {
}

// Request to end a meeting.
message EndMeetingReq {
  string meetingID = 1;
  string userID = 2;
}

// Response after ending a meeting.
message EndMeetingResp {
}

// Request to get a list of meetings both created and joined by a user.
message GetMeetingsReq {
  string userID = 1; // The unique identifier of the user.
  string status = 2; // The status filter for meetings, e.g., "scheduled", "in-progress", "completed".
}

// Response with a list of meetings that the user has created or joined.
message GetMeetingsResp {
  repeated MeetingInfoSetting meetingDetails = 1; // Detailed information about each meeting.
}

// Request to get information about a specific meeting.
message GetMeetingReq {
  string userID = 1;
  string meetingID = 2;
}

// Response with detailed information about a meeting.
message GetMeetingResp {
  MeetingInfoSetting meetingDetail = 1;
}

// Request to update specific fields of a meeting.
message UpdateMeetingRequest {
  string meetingID = 1;
  string updatingUserID = 2;
  pbwrapper.StringValue title = 3;
  pbwrapper.Int64Value scheduledTime = 4;
  pbwrapper.Int64Value meetingDuration = 5;
  pbwrapper.StringValue password = 6;
  pbwrapper.BoolValue canParticipantsEnableCamera = 7;
  pbwrapper.BoolValue canParticipantsUnmuteMicrophone = 8;
  pbwrapper.BoolValue canParticipantsShareScreen = 9;
  pbwrapper.BoolValue disableCameraOnJoin = 10;
  pbwrapper.BoolValue disableMicrophoneOnJoin = 11;
}

// Response after updating meeting settings.
message UpdateMeetingResp {
}

// Personal meeting settings related to video and audio on entry.
message PersonalMeetingSetting {
  bool cameraOnEntry = 1; // Whether the camera should be enabled by default when joining the meeting.
  bool microphoneOnEntry = 2; // Whether the microphone should be enabled by default when joining the meeting.
}

// Request to get personal meeting settings.
message GetPersonalMeetingSettingsReq {
  string meetingID = 1;
  string userID = 2;
}

// Response with personal meeting settings.
message GetPersonalMeetingSettingsResp {
  PersonalMeetingSetting setting = 1;
}

// Request to set personal meeting settings.
message SetPersonalMeetingSettingsReq {
  string meetingID = 1;
  string userID = 2;
  PersonalMeetingSetting setting = 3;
}

// Response after setting personal meeting settings.
message SetPersonalMeetingSettingsResp {
}

message PersonalData {
  string userID = 1;
  PersonalMeetingSetting personalSetting = 2;
  // limitSetting is that host user limit this user's stream operation
  PersonalMeetingSetting limitSetting = 3;
}

// Metadata about a meeting, primarily used for encapsulating meeting details.
message MeetingMetadata {
  MeetingInfoSetting detail = 1;
  repeated PersonalData personalData = 2;
}


// Defines services related to meeting management.
service MeetingService {
  // Books a future meeting.
  rpc BookMeeting(BookMeetingReq) returns (BookMeetingResp);
  // Creates an immediate meeting.
  rpc CreateImmediateMeeting(CreateImmediateMeetingReq) returns (CreateImmediateMeetingResp);
  // Joins a meeting.
  rpc JoinMeeting(JoinMeetingReq) returns (JoinMeetingResp);
  // get a specific meeting token
  rpc GetMeetingToken(GetMeetingTokenReq) returns (GetMeetingTokenResp);
  // Leaves a meeting.
  rpc LeaveMeeting(LeaveMeetingReq) returns (LeaveMeetingResp);
  // Ends a meeting.
  rpc EndMeeting(EndMeetingReq) returns (EndMeetingResp);
  // Retrieves a list of meetings that the user has created or joined, filtered by status.
  rpc GetMeetings(GetMeetingsReq) returns (GetMeetingsResp);
  // Gets detailed information about a specific meeting.
  rpc GetMeeting(GetMeetingReq) returns (GetMeetingResp);
  // Updates specific fields of a meeting.
  rpc UpdateMeeting(UpdateMeetingRequest) returns (UpdateMeetingResp);
  // Gets personal meeting settings.
  rpc GetPersonalMeetingSettings(GetPersonalMeetingSettingsReq) returns (GetPersonalMeetingSettingsResp);
  // Sets personal meeting settings.
  rpc SetPersonalMeetingSettings(SetPersonalMeetingSettingsReq) returns (SetPersonalMeetingSettingsResp);
}
