// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.15.0
// source: meeting/meeting.proto

package meeting

import (
	context "context"
	pbwrapper "github.com/openimsdk/openmeeting-server/pkg/protocol/pbwrapper"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines LiveKit access information.
type LiveKit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"` // Access token for authentication.
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url"`     // URL to connect to LiveKit.
}

func (x *LiveKit) Reset() {
	*x = LiveKit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveKit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveKit) ProtoMessage() {}

func (x *LiveKit) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveKit.ProtoReflect.Descriptor instead.
func (*LiveKit) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{0}
}

func (x *LiveKit) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LiveKit) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Information about a specific meeting that cannot be changed once set.
type SystemGeneratedMeetingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorUserID   string `protobuf:"bytes,1,opt,name=creatorUserID,proto3" json:"creatorUserID"`     // The user ID of the meeting creator.
	CreatorNickname string `protobuf:"bytes,2,opt,name=creatorNickname,proto3" json:"creatorNickname"` // The user name of the meeting creator.
	Status          string `protobuf:"bytes,3,opt,name=status,proto3" json:"status"`                   // The current status of the meeting, e.g., scheduled, in-progress, completed.
	StartTime       int64  `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime"`            // The actual start time of the meeting (as a timestamp).
	MeetingID       string `protobuf:"bytes,5,opt,name=meetingID,proto3" json:"meetingID"`             // Unique identifier for the meeting.
}

func (x *SystemGeneratedMeetingInfo) Reset() {
	*x = SystemGeneratedMeetingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemGeneratedMeetingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemGeneratedMeetingInfo) ProtoMessage() {}

func (x *SystemGeneratedMeetingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemGeneratedMeetingInfo.ProtoReflect.Descriptor instead.
func (*SystemGeneratedMeetingInfo) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{1}
}

func (x *SystemGeneratedMeetingInfo) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *SystemGeneratedMeetingInfo) GetCreatorNickname() string {
	if x != nil {
		return x.CreatorNickname
	}
	return ""
}

func (x *SystemGeneratedMeetingInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SystemGeneratedMeetingInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SystemGeneratedMeetingInfo) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

// Information about a specific meeting that can be modified.
type CreatorDefinedMeetingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`                      // The title of the meeting.
	ScheduledTime   int64  `protobuf:"varint,2,opt,name=scheduledTime,proto3" json:"scheduledTime"`     // The scheduled start time of the meeting (as a timestamp).
	MeetingDuration int64  `protobuf:"varint,3,opt,name=meetingDuration,proto3" json:"meetingDuration"` // The duration of the meeting in seconds.
	Password        string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`                // Password required to join the meeting, if any.
}

func (x *CreatorDefinedMeetingInfo) Reset() {
	*x = CreatorDefinedMeetingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorDefinedMeetingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorDefinedMeetingInfo) ProtoMessage() {}

func (x *CreatorDefinedMeetingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorDefinedMeetingInfo.ProtoReflect.Descriptor instead.
func (*CreatorDefinedMeetingInfo) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{2}
}

func (x *CreatorDefinedMeetingInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatorDefinedMeetingInfo) GetScheduledTime() int64 {
	if x != nil {
		return x.ScheduledTime
	}
	return 0
}

func (x *CreatorDefinedMeetingInfo) GetMeetingDuration() int64 {
	if x != nil {
		return x.MeetingDuration
	}
	return 0
}

func (x *CreatorDefinedMeetingInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Information about a specific meeting, combining system-generated and creator-defined information.
type MeetingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemGenerated       *SystemGeneratedMeetingInfo `protobuf:"bytes,1,opt,name=systemGenerated,proto3" json:"systemGenerated"`
	CreatorDefinedMeeting *CreatorDefinedMeetingInfo  `protobuf:"bytes,2,opt,name=creatorDefinedMeeting,proto3" json:"creatorDefinedMeeting"`
}

func (x *MeetingInfo) Reset() {
	*x = MeetingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingInfo) ProtoMessage() {}

func (x *MeetingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingInfo.ProtoReflect.Descriptor instead.
func (*MeetingInfo) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{3}
}

func (x *MeetingInfo) GetSystemGenerated() *SystemGeneratedMeetingInfo {
	if x != nil {
		return x.SystemGenerated
	}
	return nil
}

func (x *MeetingInfo) GetCreatorDefinedMeeting() *CreatorDefinedMeetingInfo {
	if x != nil {
		return x.CreatorDefinedMeeting
	}
	return nil
}

// Settings controlling meeting features such as video, audio, and screen sharing permissions.
type MeetingSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanParticipantsEnableCamera     bool `protobuf:"varint,1,opt,name=canParticipantsEnableCamera,proto3" json:"canParticipantsEnableCamera"`         // Whether participants can enable their video camera.
	CanParticipantsUnmuteMicrophone bool `protobuf:"varint,2,opt,name=canParticipantsUnmuteMicrophone,proto3" json:"canParticipantsUnmuteMicrophone"` // Whether participants can unmute their microphone.
	CanParticipantsShareScreen      bool `protobuf:"varint,3,opt,name=canParticipantsShareScreen,proto3" json:"canParticipantsShareScreen"`           // Whether participants can share their screen.
	DisableCameraOnJoin             bool `protobuf:"varint,4,opt,name=disableCameraOnJoin,proto3" json:"disableCameraOnJoin"`                         // Whether the camera is disabled by default when joining.
	DisableMicrophoneOnJoin         bool `protobuf:"varint,5,opt,name=disableMicrophoneOnJoin,proto3" json:"disableMicrophoneOnJoin"`                 // Whether the microphone is disabled by default when joining.
}

func (x *MeetingSetting) Reset() {
	*x = MeetingSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetingSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingSetting) ProtoMessage() {}

func (x *MeetingSetting) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingSetting.ProtoReflect.Descriptor instead.
func (*MeetingSetting) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{4}
}

func (x *MeetingSetting) GetCanParticipantsEnableCamera() bool {
	if x != nil {
		return x.CanParticipantsEnableCamera
	}
	return false
}

func (x *MeetingSetting) GetCanParticipantsUnmuteMicrophone() bool {
	if x != nil {
		return x.CanParticipantsUnmuteMicrophone
	}
	return false
}

func (x *MeetingSetting) GetCanParticipantsShareScreen() bool {
	if x != nil {
		return x.CanParticipantsShareScreen
	}
	return false
}

func (x *MeetingSetting) GetDisableCameraOnJoin() bool {
	if x != nil {
		return x.DisableCameraOnJoin
	}
	return false
}

func (x *MeetingSetting) GetDisableMicrophoneOnJoin() bool {
	if x != nil {
		return x.DisableMicrophoneOnJoin
	}
	return false
}

// Detailed information about a meeting, combining info and settings.
type MeetingInfoSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info    *MeetingInfo    `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
	Setting *MeetingSetting `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting"`
}

func (x *MeetingInfoSetting) Reset() {
	*x = MeetingInfoSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetingInfoSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingInfoSetting) ProtoMessage() {}

func (x *MeetingInfoSetting) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingInfoSetting.ProtoReflect.Descriptor instead.
func (*MeetingInfoSetting) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{5}
}

func (x *MeetingInfoSetting) GetInfo() *MeetingInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *MeetingInfoSetting) GetSetting() *MeetingSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	Account  string `protobuf:"bytes,3,opt,name=account,proto3" json:"account"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{6}
}

func (x *UserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

// participant meta data
type ParticipantMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *UserInfo `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo"`
}

func (x *ParticipantMetaData) Reset() {
	*x = ParticipantMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantMetaData) ProtoMessage() {}

func (x *ParticipantMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantMetaData.ProtoReflect.Descriptor instead.
func (*ParticipantMetaData) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{7}
}

func (x *ParticipantMetaData) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type StreamOperateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorUserID string               `protobuf:"bytes,1,opt,name=operatorUserID,proto3" json:"operatorUserID"`
	Operation      []*UserOperationData `protobuf:"bytes,2,rep,name=operation,proto3" json:"operation"`
}

func (x *StreamOperateData) Reset() {
	*x = StreamOperateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOperateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOperateData) ProtoMessage() {}

func (x *StreamOperateData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOperateData.ProtoReflect.Descriptor instead.
func (*StreamOperateData) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{8}
}

func (x *StreamOperateData) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *StreamOperateData) GetOperation() []*UserOperationData {
	if x != nil {
		return x.Operation
	}
	return nil
}

type UserOperationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	// pbwrapper.BoolValue cameraOnEntry = 2;
	// pbwrapper.BoolValue microphoneOnEntry = 3;
	CameraOnEntry     bool `protobuf:"varint,2,opt,name=cameraOnEntry,proto3" json:"cameraOnEntry"`
	MicrophoneOnEntry bool `protobuf:"varint,3,opt,name=microphoneOnEntry,proto3" json:"microphoneOnEntry"`
}

func (x *UserOperationData) Reset() {
	*x = UserOperationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOperationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOperationData) ProtoMessage() {}

func (x *UserOperationData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOperationData.ProtoReflect.Descriptor instead.
func (*UserOperationData) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{9}
}

func (x *UserOperationData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserOperationData) GetCameraOnEntry() bool {
	if x != nil {
		return x.CameraOnEntry
	}
	return false
}

func (x *UserOperationData) GetMicrophoneOnEntry() bool {
	if x != nil {
		return x.MicrophoneOnEntry
	}
	return false
}

// Request to book a future meeting.
type BookMeetingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorUserID             string                     `protobuf:"bytes,1,opt,name=creatorUserID,proto3" json:"creatorUserID"`
	CreatorDefinedMeetingInfo *CreatorDefinedMeetingInfo `protobuf:"bytes,2,opt,name=creatorDefinedMeetingInfo,proto3" json:"creatorDefinedMeetingInfo"`
	Setting                   *MeetingSetting            `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting"`
}

func (x *BookMeetingReq) Reset() {
	*x = BookMeetingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookMeetingReq) ProtoMessage() {}

func (x *BookMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookMeetingReq.ProtoReflect.Descriptor instead.
func (*BookMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{10}
}

func (x *BookMeetingReq) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *BookMeetingReq) GetCreatorDefinedMeetingInfo() *CreatorDefinedMeetingInfo {
	if x != nil {
		return x.CreatorDefinedMeetingInfo
	}
	return nil
}

func (x *BookMeetingReq) GetSetting() *MeetingSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// Response after booking a meeting.
type BookMeetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *MeetingInfoSetting `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail"`
}

func (x *BookMeetingResp) Reset() {
	*x = BookMeetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookMeetingResp) ProtoMessage() {}

func (x *BookMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookMeetingResp.ProtoReflect.Descriptor instead.
func (*BookMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{11}
}

func (x *BookMeetingResp) GetDetail() *MeetingInfoSetting {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Request to create an immediate meeting.
type CreateImmediateMeetingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorUserID             string                     `protobuf:"bytes,1,opt,name=creatorUserID,proto3" json:"creatorUserID"`
	CreatorDefinedMeetingInfo *CreatorDefinedMeetingInfo `protobuf:"bytes,2,opt,name=creatorDefinedMeetingInfo,proto3" json:"creatorDefinedMeetingInfo"`
	Setting                   *MeetingSetting            `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting"`
}

func (x *CreateImmediateMeetingReq) Reset() {
	*x = CreateImmediateMeetingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImmediateMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImmediateMeetingReq) ProtoMessage() {}

func (x *CreateImmediateMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImmediateMeetingReq.ProtoReflect.Descriptor instead.
func (*CreateImmediateMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{12}
}

func (x *CreateImmediateMeetingReq) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *CreateImmediateMeetingReq) GetCreatorDefinedMeetingInfo() *CreatorDefinedMeetingInfo {
	if x != nil {
		return x.CreatorDefinedMeetingInfo
	}
	return nil
}

func (x *CreateImmediateMeetingReq) GetSetting() *MeetingSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// Response after creating an immediate meeting.
type CreateImmediateMeetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail  *MeetingInfoSetting `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail"`
	LiveKit *LiveKit            `protobuf:"bytes,2,opt,name=liveKit,proto3" json:"liveKit"`
}

func (x *CreateImmediateMeetingResp) Reset() {
	*x = CreateImmediateMeetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImmediateMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImmediateMeetingResp) ProtoMessage() {}

func (x *CreateImmediateMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImmediateMeetingResp.ProtoReflect.Descriptor instead.
func (*CreateImmediateMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{13}
}

func (x *CreateImmediateMeetingResp) GetDetail() *MeetingInfoSetting {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *CreateImmediateMeetingResp) GetLiveKit() *LiveKit {
	if x != nil {
		return x.LiveKit
	}
	return nil
}

// Request to join a meeting.
type JoinMeetingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID string `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"` // User who joins the meeting.
	Password  string `protobuf:"bytes,3,opt,name=password,proto3" json:"password"`
}

func (x *JoinMeetingReq) Reset() {
	*x = JoinMeetingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMeetingReq) ProtoMessage() {}

func (x *JoinMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMeetingReq.ProtoReflect.Descriptor instead.
func (*JoinMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{14}
}

func (x *JoinMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *JoinMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *JoinMeetingReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Response after joining a meeting.
type JoinMeetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveKit *LiveKit `protobuf:"bytes,1,opt,name=liveKit,proto3" json:"liveKit"`
}

func (x *JoinMeetingResp) Reset() {
	*x = JoinMeetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMeetingResp) ProtoMessage() {}

func (x *JoinMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMeetingResp.ProtoReflect.Descriptor instead.
func (*JoinMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{15}
}

func (x *JoinMeetingResp) GetLiveKit() *LiveKit {
	if x != nil {
		return x.LiveKit
	}
	return nil
}

// Request to get a specific meeting token.
type GetMeetingTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID string `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"` // User who joins the meeting.
}

func (x *GetMeetingTokenReq) Reset() {
	*x = GetMeetingTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingTokenReq) ProtoMessage() {}

func (x *GetMeetingTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingTokenReq.ProtoReflect.Descriptor instead.
func (*GetMeetingTokenReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{16}
}

func (x *GetMeetingTokenReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *GetMeetingTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// Response after getting a specific meeting.
type GetMeetingTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID string   `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	LiveKit   *LiveKit `protobuf:"bytes,2,opt,name=liveKit,proto3" json:"liveKit"`
}

func (x *GetMeetingTokenResp) Reset() {
	*x = GetMeetingTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingTokenResp) ProtoMessage() {}

func (x *GetMeetingTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingTokenResp.ProtoReflect.Descriptor instead.
func (*GetMeetingTokenResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{17}
}

func (x *GetMeetingTokenResp) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *GetMeetingTokenResp) GetLiveKit() *LiveKit {
	if x != nil {
		return x.LiveKit
	}
	return nil
}

// Request to leave a meeting.
type LeaveMeetingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID string `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"` // User who leaves the room.
}

func (x *LeaveMeetingReq) Reset() {
	*x = LeaveMeetingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMeetingReq) ProtoMessage() {}

func (x *LeaveMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMeetingReq.ProtoReflect.Descriptor instead.
func (*LeaveMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{18}
}

func (x *LeaveMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *LeaveMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// Response after leaving a meeting.
type LeaveMeetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaveMeetingResp) Reset() {
	*x = LeaveMeetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMeetingResp) ProtoMessage() {}

func (x *LeaveMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMeetingResp.ProtoReflect.Descriptor instead.
func (*LeaveMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{19}
}

// Request to end a meeting.
type EndMeetingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID string `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
}

func (x *EndMeetingReq) Reset() {
	*x = EndMeetingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMeetingReq) ProtoMessage() {}

func (x *EndMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMeetingReq.ProtoReflect.Descriptor instead.
func (*EndMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{20}
}

func (x *EndMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *EndMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// Response after ending a meeting.
type EndMeetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndMeetingResp) Reset() {
	*x = EndMeetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMeetingResp) ProtoMessage() {}

func (x *EndMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMeetingResp.ProtoReflect.Descriptor instead.
func (*EndMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{21}
}

// Request to get a list of meetings both created and joined by a user.
type GetMeetingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // The unique identifier of the user.
	Status []string `protobuf:"bytes,2,rep,name=status,proto3" json:"status"` // The status filter for meetings, e.g., "scheduled", "in-progress", "completed".
}

func (x *GetMeetingsReq) Reset() {
	*x = GetMeetingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingsReq) ProtoMessage() {}

func (x *GetMeetingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingsReq.ProtoReflect.Descriptor instead.
func (*GetMeetingsReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{22}
}

func (x *GetMeetingsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMeetingsReq) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response with a list of meetings that the user has created or joined.
type GetMeetingsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingDetails []*MeetingInfoSetting `protobuf:"bytes,1,rep,name=meetingDetails,proto3" json:"meetingDetails"` // Detailed information about each meeting.
}

func (x *GetMeetingsResp) Reset() {
	*x = GetMeetingsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingsResp) ProtoMessage() {}

func (x *GetMeetingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingsResp.ProtoReflect.Descriptor instead.
func (*GetMeetingsResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{23}
}

func (x *GetMeetingsResp) GetMeetingDetails() []*MeetingInfoSetting {
	if x != nil {
		return x.MeetingDetails
	}
	return nil
}

// Request to get information about a specific meeting.
type GetMeetingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	MeetingID string `protobuf:"bytes,2,opt,name=meetingID,proto3" json:"meetingID"`
}

func (x *GetMeetingReq) Reset() {
	*x = GetMeetingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingReq) ProtoMessage() {}

func (x *GetMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingReq.ProtoReflect.Descriptor instead.
func (*GetMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{24}
}

func (x *GetMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

// Response with detailed information about a meeting.
type GetMeetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingDetail *MeetingInfoSetting `protobuf:"bytes,1,opt,name=meetingDetail,proto3" json:"meetingDetail"`
}

func (x *GetMeetingResp) Reset() {
	*x = GetMeetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingResp) ProtoMessage() {}

func (x *GetMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingResp.ProtoReflect.Descriptor instead.
func (*GetMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{25}
}

func (x *GetMeetingResp) GetMeetingDetail() *MeetingInfoSetting {
	if x != nil {
		return x.MeetingDetail
	}
	return nil
}

// Request to update specific fields of a meeting.
type UpdateMeetingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID                       string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	UpdatingUserID                  string                 `protobuf:"bytes,2,opt,name=updatingUserID,proto3" json:"updatingUserID"`
	Title                           *pbwrapper.StringValue `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	ScheduledTime                   *pbwrapper.Int64Value  `protobuf:"bytes,4,opt,name=scheduledTime,proto3" json:"scheduledTime"`
	MeetingDuration                 *pbwrapper.Int64Value  `protobuf:"bytes,5,opt,name=meetingDuration,proto3" json:"meetingDuration"`
	Password                        *pbwrapper.StringValue `protobuf:"bytes,6,opt,name=password,proto3" json:"password"`
	CanParticipantsEnableCamera     *pbwrapper.BoolValue   `protobuf:"bytes,7,opt,name=canParticipantsEnableCamera,proto3" json:"canParticipantsEnableCamera"`
	CanParticipantsUnmuteMicrophone *pbwrapper.BoolValue   `protobuf:"bytes,8,opt,name=canParticipantsUnmuteMicrophone,proto3" json:"canParticipantsUnmuteMicrophone"`
	CanParticipantsShareScreen      *pbwrapper.BoolValue   `protobuf:"bytes,9,opt,name=canParticipantsShareScreen,proto3" json:"canParticipantsShareScreen"`
	DisableCameraOnJoin             *pbwrapper.BoolValue   `protobuf:"bytes,10,opt,name=disableCameraOnJoin,proto3" json:"disableCameraOnJoin"`
	DisableMicrophoneOnJoin         *pbwrapper.BoolValue   `protobuf:"bytes,11,opt,name=disableMicrophoneOnJoin,proto3" json:"disableMicrophoneOnJoin"`
}

func (x *UpdateMeetingRequest) Reset() {
	*x = UpdateMeetingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeetingRequest) ProtoMessage() {}

func (x *UpdateMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeetingRequest.ProtoReflect.Descriptor instead.
func (*UpdateMeetingRequest) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateMeetingRequest) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *UpdateMeetingRequest) GetUpdatingUserID() string {
	if x != nil {
		return x.UpdatingUserID
	}
	return ""
}

func (x *UpdateMeetingRequest) GetTitle() *pbwrapper.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *UpdateMeetingRequest) GetScheduledTime() *pbwrapper.Int64Value {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *UpdateMeetingRequest) GetMeetingDuration() *pbwrapper.Int64Value {
	if x != nil {
		return x.MeetingDuration
	}
	return nil
}

func (x *UpdateMeetingRequest) GetPassword() *pbwrapper.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *UpdateMeetingRequest) GetCanParticipantsEnableCamera() *pbwrapper.BoolValue {
	if x != nil {
		return x.CanParticipantsEnableCamera
	}
	return nil
}

func (x *UpdateMeetingRequest) GetCanParticipantsUnmuteMicrophone() *pbwrapper.BoolValue {
	if x != nil {
		return x.CanParticipantsUnmuteMicrophone
	}
	return nil
}

func (x *UpdateMeetingRequest) GetCanParticipantsShareScreen() *pbwrapper.BoolValue {
	if x != nil {
		return x.CanParticipantsShareScreen
	}
	return nil
}

func (x *UpdateMeetingRequest) GetDisableCameraOnJoin() *pbwrapper.BoolValue {
	if x != nil {
		return x.DisableCameraOnJoin
	}
	return nil
}

func (x *UpdateMeetingRequest) GetDisableMicrophoneOnJoin() *pbwrapper.BoolValue {
	if x != nil {
		return x.DisableMicrophoneOnJoin
	}
	return nil
}

// Response after updating meeting settings.
type UpdateMeetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMeetingResp) Reset() {
	*x = UpdateMeetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeetingResp) ProtoMessage() {}

func (x *UpdateMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeetingResp.ProtoReflect.Descriptor instead.
func (*UpdateMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{27}
}

// Personal meeting settings related to video and audio on entry.
type PersonalMeetingSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraOnEntry     bool `protobuf:"varint,1,opt,name=cameraOnEntry,proto3" json:"cameraOnEntry"`         // Whether the camera should be enabled by default when joining the meeting.
	MicrophoneOnEntry bool `protobuf:"varint,2,opt,name=microphoneOnEntry,proto3" json:"microphoneOnEntry"` // Whether the microphone should be enabled by default when joining the meeting.
}

func (x *PersonalMeetingSetting) Reset() {
	*x = PersonalMeetingSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalMeetingSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalMeetingSetting) ProtoMessage() {}

func (x *PersonalMeetingSetting) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalMeetingSetting.ProtoReflect.Descriptor instead.
func (*PersonalMeetingSetting) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{28}
}

func (x *PersonalMeetingSetting) GetCameraOnEntry() bool {
	if x != nil {
		return x.CameraOnEntry
	}
	return false
}

func (x *PersonalMeetingSetting) GetMicrophoneOnEntry() bool {
	if x != nil {
		return x.MicrophoneOnEntry
	}
	return false
}

// Request to get personal meeting settings.
type GetPersonalMeetingSettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID string `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
}

func (x *GetPersonalMeetingSettingsReq) Reset() {
	*x = GetPersonalMeetingSettingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonalMeetingSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonalMeetingSettingsReq) ProtoMessage() {}

func (x *GetPersonalMeetingSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonalMeetingSettingsReq.ProtoReflect.Descriptor instead.
func (*GetPersonalMeetingSettingsReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{29}
}

func (x *GetPersonalMeetingSettingsReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *GetPersonalMeetingSettingsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// Response with personal meeting settings.
type GetPersonalMeetingSettingsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *PersonalMeetingSetting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting"`
}

func (x *GetPersonalMeetingSettingsResp) Reset() {
	*x = GetPersonalMeetingSettingsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonalMeetingSettingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonalMeetingSettingsResp) ProtoMessage() {}

func (x *GetPersonalMeetingSettingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonalMeetingSettingsResp.ProtoReflect.Descriptor instead.
func (*GetPersonalMeetingSettingsResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{30}
}

func (x *GetPersonalMeetingSettingsResp) GetSetting() *PersonalMeetingSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// Request to set personal meeting settings.
type SetPersonalMeetingSettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID         string               `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	UserID            string               `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	CameraOnEntry     *pbwrapper.BoolValue `protobuf:"bytes,3,opt,name=cameraOnEntry,proto3" json:"cameraOnEntry"`         // Whether the camera should be enabled by default when joining the meeting.
	MicrophoneOnEntry *pbwrapper.BoolValue `protobuf:"bytes,4,opt,name=microphoneOnEntry,proto3" json:"microphoneOnEntry"` // Whether the microphone should be enabled by default when joining the meeting.
}

func (x *SetPersonalMeetingSettingsReq) Reset() {
	*x = SetPersonalMeetingSettingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPersonalMeetingSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPersonalMeetingSettingsReq) ProtoMessage() {}

func (x *SetPersonalMeetingSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPersonalMeetingSettingsReq.ProtoReflect.Descriptor instead.
func (*SetPersonalMeetingSettingsReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{31}
}

func (x *SetPersonalMeetingSettingsReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *SetPersonalMeetingSettingsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetPersonalMeetingSettingsReq) GetCameraOnEntry() *pbwrapper.BoolValue {
	if x != nil {
		return x.CameraOnEntry
	}
	return nil
}

func (x *SetPersonalMeetingSettingsReq) GetMicrophoneOnEntry() *pbwrapper.BoolValue {
	if x != nil {
		return x.MicrophoneOnEntry
	}
	return nil
}

// Response after setting personal meeting settings.
type SetPersonalMeetingSettingsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPersonalMeetingSettingsResp) Reset() {
	*x = SetPersonalMeetingSettingsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPersonalMeetingSettingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPersonalMeetingSettingsResp) ProtoMessage() {}

func (x *SetPersonalMeetingSettingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPersonalMeetingSettingsResp.ProtoReflect.Descriptor instead.
func (*SetPersonalMeetingSettingsResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{32}
}

type PersonalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string                  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	PersonalSetting *PersonalMeetingSetting `protobuf:"bytes,2,opt,name=personalSetting,proto3" json:"personalSetting"`
	// limitSetting is that host user limit this user's stream operation
	LimitSetting *PersonalMeetingSetting `protobuf:"bytes,3,opt,name=limitSetting,proto3" json:"limitSetting"`
}

func (x *PersonalData) Reset() {
	*x = PersonalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalData) ProtoMessage() {}

func (x *PersonalData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalData.ProtoReflect.Descriptor instead.
func (*PersonalData) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{33}
}

func (x *PersonalData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PersonalData) GetPersonalSetting() *PersonalMeetingSetting {
	if x != nil {
		return x.PersonalSetting
	}
	return nil
}

func (x *PersonalData) GetLimitSetting() *PersonalMeetingSetting {
	if x != nil {
		return x.LimitSetting
	}
	return nil
}

// Metadata about a meeting, primarily used for encapsulating meeting details.
type MeetingMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail       *MeetingInfoSetting `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail"`
	PersonalData []*PersonalData     `protobuf:"bytes,2,rep,name=personalData,proto3" json:"personalData"`
}

func (x *MeetingMetadata) Reset() {
	*x = MeetingMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingMetadata) ProtoMessage() {}

func (x *MeetingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingMetadata.ProtoReflect.Descriptor instead.
func (*MeetingMetadata) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{34}
}

func (x *MeetingMetadata) GetDetail() *MeetingInfoSetting {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *MeetingMetadata) GetPersonalData() []*PersonalData {
	if x != nil {
		return x.PersonalData
	}
	return nil
}

// operate room all stream related to video and audio on entry.
type OperateRoomAllStreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingID         string               `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID"`
	OperatorUserID    string               `protobuf:"bytes,2,opt,name=operatorUserID,proto3" json:"operatorUserID"`
	CameraOnEntry     *pbwrapper.BoolValue `protobuf:"bytes,3,opt,name=cameraOnEntry,proto3" json:"cameraOnEntry"`         // Whether the camera should be enabled by default when joining the meeting.
	MicrophoneOnEntry *pbwrapper.BoolValue `protobuf:"bytes,4,opt,name=microphoneOnEntry,proto3" json:"microphoneOnEntry"` // Whether the microphone should be enabled by default when joining the meeting.
}

func (x *OperateRoomAllStreamReq) Reset() {
	*x = OperateRoomAllStreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateRoomAllStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateRoomAllStreamReq) ProtoMessage() {}

func (x *OperateRoomAllStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateRoomAllStreamReq.ProtoReflect.Descriptor instead.
func (*OperateRoomAllStreamReq) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{35}
}

func (x *OperateRoomAllStreamReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *OperateRoomAllStreamReq) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *OperateRoomAllStreamReq) GetCameraOnEntry() *pbwrapper.BoolValue {
	if x != nil {
		return x.CameraOnEntry
	}
	return nil
}

func (x *OperateRoomAllStreamReq) GetMicrophoneOnEntry() *pbwrapper.BoolValue {
	if x != nil {
		return x.MicrophoneOnEntry
	}
	return nil
}

// Response with operate room all stream.
type OperateRoomAllStreamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamNotExistUserIDList []string `protobuf:"bytes,1,rep,name=streamNotExistUserIDList,proto3" json:"streamNotExistUserIDList"`
	FailedUserIDList         []string `protobuf:"bytes,2,rep,name=failedUserIDList,proto3" json:"failedUserIDList"`
}

func (x *OperateRoomAllStreamResp) Reset() {
	*x = OperateRoomAllStreamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meeting_meeting_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateRoomAllStreamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateRoomAllStreamResp) ProtoMessage() {}

func (x *OperateRoomAllStreamResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_meeting_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateRoomAllStreamResp.ProtoReflect.Descriptor instead.
func (*OperateRoomAllStreamResp) Descriptor() ([]byte, []int) {
	return file_meeting_meeting_proto_rawDescGZIP(), []int{36}
}

func (x *OperateRoomAllStreamResp) GetStreamNotExistUserIDList() []string {
	if x != nil {
		return x.StreamNotExistUserIDList
	}
	return nil
}

func (x *OperateRoomAllStreamResp) GetFailedUserIDList() []string {
	if x != nil {
		return x.FailedUserIDList
	}
	return nil
}

var File_meeting_meeting_proto protoreflect.FileDescriptor

var file_meeting_meeting_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x19, 0x70, 0x62,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x07, 0x4c, 0x69, 0x76, 0x65, 0x4b,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x9d, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xce, 0x01,
	0x0a, 0x0b, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a,
	0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xc8,
	0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x12, 0x48, 0x0a, 0x1f, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x63, 0x61,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x6e, 0x6d,
	0x75, 0x74, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3e, 0x0a,
	0x1a, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x30, 0x0a,
	0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e,
	0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x38, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x58, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x50, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x44, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x6c, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x52, 0x0a, 0x0f,
	0x42, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0xee, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x6c, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x36, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74,
	0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x22, 0x62, 0x0a, 0x0e, 0x4a, 0x6f, 0x69,
	0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x49, 0x0a,
	0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x36, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x52,
	0x07, 0x6c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x07, 0x6c, 0x69, 0x76,
	0x65, 0x4b, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x4b, 0x69,
	0x74, 0x22, 0x47, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x45,
	0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x0e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x45, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0d, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xce, 0x06, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x47,
	0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x62, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x61, 0x6e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x6a, 0x0a, 0x1f, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x6e, 0x6d, 0x75, 0x74,
	0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1f, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x17, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f,
	0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6c, 0x0a, 0x16, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x55, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x67, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xed, 0x01, 0x0a, 0x1d, 0x53, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0xce, 0x01, 0x0a, 0x0c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x0c, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x99, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x62, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3a, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xf3, 0x09, 0x0a, 0x0e, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x42, 0x6f,
	0x6f, 0x6b, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x58, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5b, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x0a,
	0x45, 0x6e, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x85, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x73, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meeting_meeting_proto_rawDescOnce sync.Once
	file_meeting_meeting_proto_rawDescData = file_meeting_meeting_proto_rawDesc
)

func file_meeting_meeting_proto_rawDescGZIP() []byte {
	file_meeting_meeting_proto_rawDescOnce.Do(func() {
		file_meeting_meeting_proto_rawDescData = protoimpl.X.CompressGZIP(file_meeting_meeting_proto_rawDescData)
	})
	return file_meeting_meeting_proto_rawDescData
}

var file_meeting_meeting_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_meeting_meeting_proto_goTypes = []interface{}{
	(*LiveKit)(nil),                        // 0: openmeeting.meeting.LiveKit
	(*SystemGeneratedMeetingInfo)(nil),     // 1: openmeeting.meeting.SystemGeneratedMeetingInfo
	(*CreatorDefinedMeetingInfo)(nil),      // 2: openmeeting.meeting.CreatorDefinedMeetingInfo
	(*MeetingInfo)(nil),                    // 3: openmeeting.meeting.MeetingInfo
	(*MeetingSetting)(nil),                 // 4: openmeeting.meeting.MeetingSetting
	(*MeetingInfoSetting)(nil),             // 5: openmeeting.meeting.MeetingInfoSetting
	(*UserInfo)(nil),                       // 6: openmeeting.meeting.UserInfo
	(*ParticipantMetaData)(nil),            // 7: openmeeting.meeting.ParticipantMetaData
	(*StreamOperateData)(nil),              // 8: openmeeting.meeting.StreamOperateData
	(*UserOperationData)(nil),              // 9: openmeeting.meeting.UserOperationData
	(*BookMeetingReq)(nil),                 // 10: openmeeting.meeting.BookMeetingReq
	(*BookMeetingResp)(nil),                // 11: openmeeting.meeting.BookMeetingResp
	(*CreateImmediateMeetingReq)(nil),      // 12: openmeeting.meeting.CreateImmediateMeetingReq
	(*CreateImmediateMeetingResp)(nil),     // 13: openmeeting.meeting.CreateImmediateMeetingResp
	(*JoinMeetingReq)(nil),                 // 14: openmeeting.meeting.JoinMeetingReq
	(*JoinMeetingResp)(nil),                // 15: openmeeting.meeting.JoinMeetingResp
	(*GetMeetingTokenReq)(nil),             // 16: openmeeting.meeting.GetMeetingTokenReq
	(*GetMeetingTokenResp)(nil),            // 17: openmeeting.meeting.GetMeetingTokenResp
	(*LeaveMeetingReq)(nil),                // 18: openmeeting.meeting.LeaveMeetingReq
	(*LeaveMeetingResp)(nil),               // 19: openmeeting.meeting.LeaveMeetingResp
	(*EndMeetingReq)(nil),                  // 20: openmeeting.meeting.EndMeetingReq
	(*EndMeetingResp)(nil),                 // 21: openmeeting.meeting.EndMeetingResp
	(*GetMeetingsReq)(nil),                 // 22: openmeeting.meeting.GetMeetingsReq
	(*GetMeetingsResp)(nil),                // 23: openmeeting.meeting.GetMeetingsResp
	(*GetMeetingReq)(nil),                  // 24: openmeeting.meeting.GetMeetingReq
	(*GetMeetingResp)(nil),                 // 25: openmeeting.meeting.GetMeetingResp
	(*UpdateMeetingRequest)(nil),           // 26: openmeeting.meeting.UpdateMeetingRequest
	(*UpdateMeetingResp)(nil),              // 27: openmeeting.meeting.UpdateMeetingResp
	(*PersonalMeetingSetting)(nil),         // 28: openmeeting.meeting.PersonalMeetingSetting
	(*GetPersonalMeetingSettingsReq)(nil),  // 29: openmeeting.meeting.GetPersonalMeetingSettingsReq
	(*GetPersonalMeetingSettingsResp)(nil), // 30: openmeeting.meeting.GetPersonalMeetingSettingsResp
	(*SetPersonalMeetingSettingsReq)(nil),  // 31: openmeeting.meeting.SetPersonalMeetingSettingsReq
	(*SetPersonalMeetingSettingsResp)(nil), // 32: openmeeting.meeting.SetPersonalMeetingSettingsResp
	(*PersonalData)(nil),                   // 33: openmeeting.meeting.PersonalData
	(*MeetingMetadata)(nil),                // 34: openmeeting.meeting.MeetingMetadata
	(*OperateRoomAllStreamReq)(nil),        // 35: openmeeting.meeting.OperateRoomAllStreamReq
	(*OperateRoomAllStreamResp)(nil),       // 36: openmeeting.meeting.OperateRoomAllStreamResp
	(*pbwrapper.StringValue)(nil),          // 37: openmeeting.pbwrapper.StringValue
	(*pbwrapper.Int64Value)(nil),           // 38: openmeeting.pbwrapper.Int64Value
	(*pbwrapper.BoolValue)(nil),            // 39: openmeeting.pbwrapper.BoolValue
}
var file_meeting_meeting_proto_depIdxs = []int32{
	1,  // 0: openmeeting.meeting.MeetingInfo.systemGenerated:type_name -> openmeeting.meeting.SystemGeneratedMeetingInfo
	2,  // 1: openmeeting.meeting.MeetingInfo.creatorDefinedMeeting:type_name -> openmeeting.meeting.CreatorDefinedMeetingInfo
	3,  // 2: openmeeting.meeting.MeetingInfoSetting.info:type_name -> openmeeting.meeting.MeetingInfo
	4,  // 3: openmeeting.meeting.MeetingInfoSetting.setting:type_name -> openmeeting.meeting.MeetingSetting
	6,  // 4: openmeeting.meeting.ParticipantMetaData.userInfo:type_name -> openmeeting.meeting.UserInfo
	9,  // 5: openmeeting.meeting.StreamOperateData.operation:type_name -> openmeeting.meeting.UserOperationData
	2,  // 6: openmeeting.meeting.BookMeetingReq.creatorDefinedMeetingInfo:type_name -> openmeeting.meeting.CreatorDefinedMeetingInfo
	4,  // 7: openmeeting.meeting.BookMeetingReq.setting:type_name -> openmeeting.meeting.MeetingSetting
	5,  // 8: openmeeting.meeting.BookMeetingResp.detail:type_name -> openmeeting.meeting.MeetingInfoSetting
	2,  // 9: openmeeting.meeting.CreateImmediateMeetingReq.creatorDefinedMeetingInfo:type_name -> openmeeting.meeting.CreatorDefinedMeetingInfo
	4,  // 10: openmeeting.meeting.CreateImmediateMeetingReq.setting:type_name -> openmeeting.meeting.MeetingSetting
	5,  // 11: openmeeting.meeting.CreateImmediateMeetingResp.detail:type_name -> openmeeting.meeting.MeetingInfoSetting
	0,  // 12: openmeeting.meeting.CreateImmediateMeetingResp.liveKit:type_name -> openmeeting.meeting.LiveKit
	0,  // 13: openmeeting.meeting.JoinMeetingResp.liveKit:type_name -> openmeeting.meeting.LiveKit
	0,  // 14: openmeeting.meeting.GetMeetingTokenResp.liveKit:type_name -> openmeeting.meeting.LiveKit
	5,  // 15: openmeeting.meeting.GetMeetingsResp.meetingDetails:type_name -> openmeeting.meeting.MeetingInfoSetting
	5,  // 16: openmeeting.meeting.GetMeetingResp.meetingDetail:type_name -> openmeeting.meeting.MeetingInfoSetting
	37, // 17: openmeeting.meeting.UpdateMeetingRequest.title:type_name -> openmeeting.pbwrapper.StringValue
	38, // 18: openmeeting.meeting.UpdateMeetingRequest.scheduledTime:type_name -> openmeeting.pbwrapper.Int64Value
	38, // 19: openmeeting.meeting.UpdateMeetingRequest.meetingDuration:type_name -> openmeeting.pbwrapper.Int64Value
	37, // 20: openmeeting.meeting.UpdateMeetingRequest.password:type_name -> openmeeting.pbwrapper.StringValue
	39, // 21: openmeeting.meeting.UpdateMeetingRequest.canParticipantsEnableCamera:type_name -> openmeeting.pbwrapper.BoolValue
	39, // 22: openmeeting.meeting.UpdateMeetingRequest.canParticipantsUnmuteMicrophone:type_name -> openmeeting.pbwrapper.BoolValue
	39, // 23: openmeeting.meeting.UpdateMeetingRequest.canParticipantsShareScreen:type_name -> openmeeting.pbwrapper.BoolValue
	39, // 24: openmeeting.meeting.UpdateMeetingRequest.disableCameraOnJoin:type_name -> openmeeting.pbwrapper.BoolValue
	39, // 25: openmeeting.meeting.UpdateMeetingRequest.disableMicrophoneOnJoin:type_name -> openmeeting.pbwrapper.BoolValue
	28, // 26: openmeeting.meeting.GetPersonalMeetingSettingsResp.setting:type_name -> openmeeting.meeting.PersonalMeetingSetting
	39, // 27: openmeeting.meeting.SetPersonalMeetingSettingsReq.cameraOnEntry:type_name -> openmeeting.pbwrapper.BoolValue
	39, // 28: openmeeting.meeting.SetPersonalMeetingSettingsReq.microphoneOnEntry:type_name -> openmeeting.pbwrapper.BoolValue
	28, // 29: openmeeting.meeting.PersonalData.personalSetting:type_name -> openmeeting.meeting.PersonalMeetingSetting
	28, // 30: openmeeting.meeting.PersonalData.limitSetting:type_name -> openmeeting.meeting.PersonalMeetingSetting
	5,  // 31: openmeeting.meeting.MeetingMetadata.detail:type_name -> openmeeting.meeting.MeetingInfoSetting
	33, // 32: openmeeting.meeting.MeetingMetadata.personalData:type_name -> openmeeting.meeting.PersonalData
	39, // 33: openmeeting.meeting.OperateRoomAllStreamReq.cameraOnEntry:type_name -> openmeeting.pbwrapper.BoolValue
	39, // 34: openmeeting.meeting.OperateRoomAllStreamReq.microphoneOnEntry:type_name -> openmeeting.pbwrapper.BoolValue
	10, // 35: openmeeting.meeting.MeetingService.BookMeeting:input_type -> openmeeting.meeting.BookMeetingReq
	12, // 36: openmeeting.meeting.MeetingService.CreateImmediateMeeting:input_type -> openmeeting.meeting.CreateImmediateMeetingReq
	14, // 37: openmeeting.meeting.MeetingService.JoinMeeting:input_type -> openmeeting.meeting.JoinMeetingReq
	16, // 38: openmeeting.meeting.MeetingService.GetMeetingToken:input_type -> openmeeting.meeting.GetMeetingTokenReq
	18, // 39: openmeeting.meeting.MeetingService.LeaveMeeting:input_type -> openmeeting.meeting.LeaveMeetingReq
	20, // 40: openmeeting.meeting.MeetingService.EndMeeting:input_type -> openmeeting.meeting.EndMeetingReq
	22, // 41: openmeeting.meeting.MeetingService.GetMeetings:input_type -> openmeeting.meeting.GetMeetingsReq
	24, // 42: openmeeting.meeting.MeetingService.GetMeeting:input_type -> openmeeting.meeting.GetMeetingReq
	26, // 43: openmeeting.meeting.MeetingService.UpdateMeeting:input_type -> openmeeting.meeting.UpdateMeetingRequest
	29, // 44: openmeeting.meeting.MeetingService.GetPersonalMeetingSettings:input_type -> openmeeting.meeting.GetPersonalMeetingSettingsReq
	31, // 45: openmeeting.meeting.MeetingService.SetPersonalMeetingSettings:input_type -> openmeeting.meeting.SetPersonalMeetingSettingsReq
	35, // 46: openmeeting.meeting.MeetingService.OperateRoomAllStream:input_type -> openmeeting.meeting.OperateRoomAllStreamReq
	11, // 47: openmeeting.meeting.MeetingService.BookMeeting:output_type -> openmeeting.meeting.BookMeetingResp
	13, // 48: openmeeting.meeting.MeetingService.CreateImmediateMeeting:output_type -> openmeeting.meeting.CreateImmediateMeetingResp
	15, // 49: openmeeting.meeting.MeetingService.JoinMeeting:output_type -> openmeeting.meeting.JoinMeetingResp
	17, // 50: openmeeting.meeting.MeetingService.GetMeetingToken:output_type -> openmeeting.meeting.GetMeetingTokenResp
	19, // 51: openmeeting.meeting.MeetingService.LeaveMeeting:output_type -> openmeeting.meeting.LeaveMeetingResp
	21, // 52: openmeeting.meeting.MeetingService.EndMeeting:output_type -> openmeeting.meeting.EndMeetingResp
	23, // 53: openmeeting.meeting.MeetingService.GetMeetings:output_type -> openmeeting.meeting.GetMeetingsResp
	25, // 54: openmeeting.meeting.MeetingService.GetMeeting:output_type -> openmeeting.meeting.GetMeetingResp
	27, // 55: openmeeting.meeting.MeetingService.UpdateMeeting:output_type -> openmeeting.meeting.UpdateMeetingResp
	30, // 56: openmeeting.meeting.MeetingService.GetPersonalMeetingSettings:output_type -> openmeeting.meeting.GetPersonalMeetingSettingsResp
	32, // 57: openmeeting.meeting.MeetingService.SetPersonalMeetingSettings:output_type -> openmeeting.meeting.SetPersonalMeetingSettingsResp
	36, // 58: openmeeting.meeting.MeetingService.OperateRoomAllStream:output_type -> openmeeting.meeting.OperateRoomAllStreamResp
	47, // [47:59] is the sub-list for method output_type
	35, // [35:47] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_meeting_meeting_proto_init() }
func file_meeting_meeting_proto_init() {
	if File_meeting_meeting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meeting_meeting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveKit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemGeneratedMeetingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorDefinedMeetingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetingSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetingInfoSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOperateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOperationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookMeetingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookMeetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImmediateMeetingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImmediateMeetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinMeetingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinMeetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveMeetingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveMeetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMeetingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMeetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeetingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalMeetingSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonalMeetingSettingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonalMeetingSettingsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPersonalMeetingSettingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPersonalMeetingSettingsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetingMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateRoomAllStreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meeting_meeting_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateRoomAllStreamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meeting_meeting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meeting_meeting_proto_goTypes,
		DependencyIndexes: file_meeting_meeting_proto_depIdxs,
		MessageInfos:      file_meeting_meeting_proto_msgTypes,
	}.Build()
	File_meeting_meeting_proto = out.File
	file_meeting_meeting_proto_rawDesc = nil
	file_meeting_meeting_proto_goTypes = nil
	file_meeting_meeting_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MeetingServiceClient is the client API for MeetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeetingServiceClient interface {
	// Books a future meeting.
	BookMeeting(ctx context.Context, in *BookMeetingReq, opts ...grpc.CallOption) (*BookMeetingResp, error)
	// Creates an immediate meeting.
	CreateImmediateMeeting(ctx context.Context, in *CreateImmediateMeetingReq, opts ...grpc.CallOption) (*CreateImmediateMeetingResp, error)
	// Joins a meeting.
	JoinMeeting(ctx context.Context, in *JoinMeetingReq, opts ...grpc.CallOption) (*JoinMeetingResp, error)
	// get a specific meeting token
	GetMeetingToken(ctx context.Context, in *GetMeetingTokenReq, opts ...grpc.CallOption) (*GetMeetingTokenResp, error)
	// Leaves a meeting.
	LeaveMeeting(ctx context.Context, in *LeaveMeetingReq, opts ...grpc.CallOption) (*LeaveMeetingResp, error)
	// Ends a meeting.
	EndMeeting(ctx context.Context, in *EndMeetingReq, opts ...grpc.CallOption) (*EndMeetingResp, error)
	// Retrieves a list of meetings that the user has created or joined, filtered by status.
	GetMeetings(ctx context.Context, in *GetMeetingsReq, opts ...grpc.CallOption) (*GetMeetingsResp, error)
	// Gets detailed information about a specific meeting.
	GetMeeting(ctx context.Context, in *GetMeetingReq, opts ...grpc.CallOption) (*GetMeetingResp, error)
	// Updates specific fields of a meeting.
	UpdateMeeting(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*UpdateMeetingResp, error)
	// Gets personal meeting settings.
	GetPersonalMeetingSettings(ctx context.Context, in *GetPersonalMeetingSettingsReq, opts ...grpc.CallOption) (*GetPersonalMeetingSettingsResp, error)
	// Sets personal meeting settings.
	SetPersonalMeetingSettings(ctx context.Context, in *SetPersonalMeetingSettingsReq, opts ...grpc.CallOption) (*SetPersonalMeetingSettingsResp, error)
	// operate room all stream.
	OperateRoomAllStream(ctx context.Context, in *OperateRoomAllStreamReq, opts ...grpc.CallOption) (*OperateRoomAllStreamResp, error)
}

type meetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetingServiceClient(cc grpc.ClientConnInterface) MeetingServiceClient {
	return &meetingServiceClient{cc}
}

func (c *meetingServiceClient) BookMeeting(ctx context.Context, in *BookMeetingReq, opts ...grpc.CallOption) (*BookMeetingResp, error) {
	out := new(BookMeetingResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/BookMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) CreateImmediateMeeting(ctx context.Context, in *CreateImmediateMeetingReq, opts ...grpc.CallOption) (*CreateImmediateMeetingResp, error) {
	out := new(CreateImmediateMeetingResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/CreateImmediateMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) JoinMeeting(ctx context.Context, in *JoinMeetingReq, opts ...grpc.CallOption) (*JoinMeetingResp, error) {
	out := new(JoinMeetingResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/JoinMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetMeetingToken(ctx context.Context, in *GetMeetingTokenReq, opts ...grpc.CallOption) (*GetMeetingTokenResp, error) {
	out := new(GetMeetingTokenResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/GetMeetingToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) LeaveMeeting(ctx context.Context, in *LeaveMeetingReq, opts ...grpc.CallOption) (*LeaveMeetingResp, error) {
	out := new(LeaveMeetingResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/LeaveMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) EndMeeting(ctx context.Context, in *EndMeetingReq, opts ...grpc.CallOption) (*EndMeetingResp, error) {
	out := new(EndMeetingResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/EndMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetMeetings(ctx context.Context, in *GetMeetingsReq, opts ...grpc.CallOption) (*GetMeetingsResp, error) {
	out := new(GetMeetingsResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/GetMeetings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetMeeting(ctx context.Context, in *GetMeetingReq, opts ...grpc.CallOption) (*GetMeetingResp, error) {
	out := new(GetMeetingResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/GetMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) UpdateMeeting(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*UpdateMeetingResp, error) {
	out := new(UpdateMeetingResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/UpdateMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetPersonalMeetingSettings(ctx context.Context, in *GetPersonalMeetingSettingsReq, opts ...grpc.CallOption) (*GetPersonalMeetingSettingsResp, error) {
	out := new(GetPersonalMeetingSettingsResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/GetPersonalMeetingSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) SetPersonalMeetingSettings(ctx context.Context, in *SetPersonalMeetingSettingsReq, opts ...grpc.CallOption) (*SetPersonalMeetingSettingsResp, error) {
	out := new(SetPersonalMeetingSettingsResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/SetPersonalMeetingSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) OperateRoomAllStream(ctx context.Context, in *OperateRoomAllStreamReq, opts ...grpc.CallOption) (*OperateRoomAllStreamResp, error) {
	out := new(OperateRoomAllStreamResp)
	err := c.cc.Invoke(ctx, "/openmeeting.meeting.MeetingService/OperateRoomAllStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetingServiceServer is the server API for MeetingService service.
type MeetingServiceServer interface {
	// Books a future meeting.
	BookMeeting(context.Context, *BookMeetingReq) (*BookMeetingResp, error)
	// Creates an immediate meeting.
	CreateImmediateMeeting(context.Context, *CreateImmediateMeetingReq) (*CreateImmediateMeetingResp, error)
	// Joins a meeting.
	JoinMeeting(context.Context, *JoinMeetingReq) (*JoinMeetingResp, error)
	// get a specific meeting token
	GetMeetingToken(context.Context, *GetMeetingTokenReq) (*GetMeetingTokenResp, error)
	// Leaves a meeting.
	LeaveMeeting(context.Context, *LeaveMeetingReq) (*LeaveMeetingResp, error)
	// Ends a meeting.
	EndMeeting(context.Context, *EndMeetingReq) (*EndMeetingResp, error)
	// Retrieves a list of meetings that the user has created or joined, filtered by status.
	GetMeetings(context.Context, *GetMeetingsReq) (*GetMeetingsResp, error)
	// Gets detailed information about a specific meeting.
	GetMeeting(context.Context, *GetMeetingReq) (*GetMeetingResp, error)
	// Updates specific fields of a meeting.
	UpdateMeeting(context.Context, *UpdateMeetingRequest) (*UpdateMeetingResp, error)
	// Gets personal meeting settings.
	GetPersonalMeetingSettings(context.Context, *GetPersonalMeetingSettingsReq) (*GetPersonalMeetingSettingsResp, error)
	// Sets personal meeting settings.
	SetPersonalMeetingSettings(context.Context, *SetPersonalMeetingSettingsReq) (*SetPersonalMeetingSettingsResp, error)
	// operate room all stream.
	OperateRoomAllStream(context.Context, *OperateRoomAllStreamReq) (*OperateRoomAllStreamResp, error)
}

// UnimplementedMeetingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMeetingServiceServer struct {
}

func (*UnimplementedMeetingServiceServer) BookMeeting(context.Context, *BookMeetingReq) (*BookMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookMeeting not implemented")
}
func (*UnimplementedMeetingServiceServer) CreateImmediateMeeting(context.Context, *CreateImmediateMeetingReq) (*CreateImmediateMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImmediateMeeting not implemented")
}
func (*UnimplementedMeetingServiceServer) JoinMeeting(context.Context, *JoinMeetingReq) (*JoinMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMeeting not implemented")
}
func (*UnimplementedMeetingServiceServer) GetMeetingToken(context.Context, *GetMeetingTokenReq) (*GetMeetingTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetingToken not implemented")
}
func (*UnimplementedMeetingServiceServer) LeaveMeeting(context.Context, *LeaveMeetingReq) (*LeaveMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMeeting not implemented")
}
func (*UnimplementedMeetingServiceServer) EndMeeting(context.Context, *EndMeetingReq) (*EndMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndMeeting not implemented")
}
func (*UnimplementedMeetingServiceServer) GetMeetings(context.Context, *GetMeetingsReq) (*GetMeetingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetings not implemented")
}
func (*UnimplementedMeetingServiceServer) GetMeeting(context.Context, *GetMeetingReq) (*GetMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeeting not implemented")
}
func (*UnimplementedMeetingServiceServer) UpdateMeeting(context.Context, *UpdateMeetingRequest) (*UpdateMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeeting not implemented")
}
func (*UnimplementedMeetingServiceServer) GetPersonalMeetingSettings(context.Context, *GetPersonalMeetingSettingsReq) (*GetPersonalMeetingSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalMeetingSettings not implemented")
}
func (*UnimplementedMeetingServiceServer) SetPersonalMeetingSettings(context.Context, *SetPersonalMeetingSettingsReq) (*SetPersonalMeetingSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersonalMeetingSettings not implemented")
}
func (*UnimplementedMeetingServiceServer) OperateRoomAllStream(context.Context, *OperateRoomAllStreamReq) (*OperateRoomAllStreamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateRoomAllStream not implemented")
}

func RegisterMeetingServiceServer(s *grpc.Server, srv MeetingServiceServer) {
	s.RegisterService(&_MeetingService_serviceDesc, srv)
}

func _MeetingService_BookMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).BookMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/BookMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).BookMeeting(ctx, req.(*BookMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_CreateImmediateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImmediateMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).CreateImmediateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/CreateImmediateMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).CreateImmediateMeeting(ctx, req.(*CreateImmediateMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_JoinMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).JoinMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/JoinMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).JoinMeeting(ctx, req.(*JoinMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetMeetingToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetMeetingToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/GetMeetingToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetMeetingToken(ctx, req.(*GetMeetingTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_LeaveMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).LeaveMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/LeaveMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).LeaveMeeting(ctx, req.(*LeaveMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_EndMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).EndMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/EndMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).EndMeeting(ctx, req.(*EndMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetMeetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetMeetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/GetMeetings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetMeetings(ctx, req.(*GetMeetingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/GetMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetMeeting(ctx, req.(*GetMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_UpdateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).UpdateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/UpdateMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).UpdateMeeting(ctx, req.(*UpdateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetPersonalMeetingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalMeetingSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetPersonalMeetingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/GetPersonalMeetingSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetPersonalMeetingSettings(ctx, req.(*GetPersonalMeetingSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_SetPersonalMeetingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersonalMeetingSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).SetPersonalMeetingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/SetPersonalMeetingSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).SetPersonalMeetingSettings(ctx, req.(*SetPersonalMeetingSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_OperateRoomAllStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateRoomAllStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).OperateRoomAllStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmeeting.meeting.MeetingService/OperateRoomAllStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).OperateRoomAllStream(ctx, req.(*OperateRoomAllStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeetingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmeeting.meeting.MeetingService",
	HandlerType: (*MeetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookMeeting",
			Handler:    _MeetingService_BookMeeting_Handler,
		},
		{
			MethodName: "CreateImmediateMeeting",
			Handler:    _MeetingService_CreateImmediateMeeting_Handler,
		},
		{
			MethodName: "JoinMeeting",
			Handler:    _MeetingService_JoinMeeting_Handler,
		},
		{
			MethodName: "GetMeetingToken",
			Handler:    _MeetingService_GetMeetingToken_Handler,
		},
		{
			MethodName: "LeaveMeeting",
			Handler:    _MeetingService_LeaveMeeting_Handler,
		},
		{
			MethodName: "EndMeeting",
			Handler:    _MeetingService_EndMeeting_Handler,
		},
		{
			MethodName: "GetMeetings",
			Handler:    _MeetingService_GetMeetings_Handler,
		},
		{
			MethodName: "GetMeeting",
			Handler:    _MeetingService_GetMeeting_Handler,
		},
		{
			MethodName: "UpdateMeeting",
			Handler:    _MeetingService_UpdateMeeting_Handler,
		},
		{
			MethodName: "GetPersonalMeetingSettings",
			Handler:    _MeetingService_GetPersonalMeetingSettings_Handler,
		},
		{
			MethodName: "SetPersonalMeetingSettings",
			Handler:    _MeetingService_SetPersonalMeetingSettings_Handler,
		},
		{
			MethodName: "OperateRoomAllStream",
			Handler:    _MeetingService_OperateRoomAllStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meeting/meeting.proto",
}
